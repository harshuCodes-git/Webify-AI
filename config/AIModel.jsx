const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodegenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


  export const chatSession = model.startChat({
    generationConfig,
    history: []
  });

  export const GenAICode = model.startChat({
    generationConfig: CodegenerationConfig,
    history: [
      {
        role: "user",
        parts: [
          {
            text: 'generate todo app Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n\n\n\n}\n',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "projectTitle": "Todo App",\n  "explanation": "This React-based Todo App allows users to create, manage, and track their tasks. It\'s built with Tailwind CSS for styling, providing a clean and responsive user interface. The app utilizes components for task lists, input fields, and individual todo items. Users can add new tasks, mark them as complete, edit, and delete them. Date-fns library will be used to format the date. Additionally,  react-chartjs-2  to show graphical summary of the data.",\n  "files": {\n    "/App.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport TodoList from \'./components/TodoList\';\\nimport TodoForm from \'./components/TodoForm\';\\nimport { Trash, Edit, Check, X, Plus } from \'lucide-react\';\\nimport { format } from \'date-fns\';\\nimport { Bar } from \'react-chartjs-2\'\\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend} from \'chart.js\';\\n\\n\\nChartJS.register(\\n    CategoryScale,\\n    LinearScale,\\n    BarElement,\\n    Title,\\n    Tooltip,\\n    Legend\\n  )\\n\\nconst initialTodos = JSON.parse(localStorage.getItem(\'todos\')) || [];\\n\\nfunction App() {\\n  const [todos, setTodos] = useState(initialTodos);\\n  const [editTodo, setEditTodo] = useState(null);\\n  const [chartData, setChartData] = useState({\\n    labels: [\'Total\', \'Completed\', \'Pending\'],\\n    datasets: [\\n        {\\n            label: \'Tasks\',\\n            data: [todos.length, todos.filter(todo => todo.completed).length, todos.filter(todo => !todo.completed).length],\\n            backgroundColor: [\\n                \'rgba(255, 99, 132, 0.2)\',\\n                \'rgba(75, 192, 192, 0.2)\',\\n                \'rgba(54, 162, 235, 0.2)\',\\n            ],\\n            borderColor: [\\n                \'rgba(255, 99, 132, 1)\',\\n                \'rgba(75, 192, 192, 1)\',\\n                \'rgba(54, 162, 235, 1)\',\\n            ],\\n            borderWidth: 1,\\n        }\\n    ]\\n  });\\n\\n\\n  useEffect(() => {\\n    localStorage.setItem(\'todos\', JSON.stringify(todos));\\n    setChartData({\\n      labels: [\'Total\', \'Completed\', \'Pending\'],\\n      datasets: [\\n          {\\n              label: \'Tasks\',\\n              data: [todos.length, todos.filter(todo => todo.completed).length, todos.filter(todo => !todo.completed).length],\\n              backgroundColor: [\\n                  \'rgba(255, 99, 132, 0.2)\',\\n                  \'rgba(75, 192, 192, 0.2)\',\\n                  \'rgba(54, 162, 235, 0.2)\',\\n              ],\\n              borderColor: [\\n                  \'rgba(255, 99, 132, 1)\',\\n                  \'rgba(75, 192, 192, 1)\',\\n                  \'rgba(54, 162, 235, 1)\',\\n              ],\\n              borderWidth: 1,\\n          }\\n      ]\\n    });\\n  }, [todos]);\\n\\n  const addTodo = (text) => {\\n    const newTodo = { id: Date.now(), text, completed: false, createdAt: new Date() };\\n    setTodos([...todos, newTodo]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(\\n      todos.map((todo) =>\\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n      )\\n    );\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter((todo) => todo.id !== id));\\n  };\\n\\n  const updateTodo = (id, text) => {\\n    setTodos(\\n      todos.map((todo) => (todo.id === id ? { ...todo, text } : todo))\\n    );\\n    setEditTodo(null);\\n  };\\n\\n  return (\\n    <div className=\\"bg-gray-100 min-h-screen py-10\\">\\n      <div className=\\"container mx-auto p-4 max-w-2xl bg-white shadow-lg rounded-lg\\">\\n        <h1 className=\\"text-3xl font-semibold mb-6 text-center text-gray-800\\">My Todo List üìù</h1>\\n        <TodoForm addTodo={addTodo} />\\n        <TodoList\\n          todos={todos}\\n          toggleComplete={toggleComplete}\\n          deleteTodo={deleteTodo}\\n          setEditTodo={setEditTodo}\\n          editTodo={editTodo}\\n          updateTodo={updateTodo}\\n        />\\n          <div className=\\"mt-6\\">\\n              <h2 className=\\"text-xl font-semibold mb-4 text-center text-gray-800\\">Task Summary üìä</h2>\\n              <Bar data={chartData} />\\n          </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n",\n      "test": null\n    },\n    "/components/TodoForm.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Plus } from \'lucide-react\';\\n\\nfunction TodoForm({ addTodo }) {\\n  const [text, setText] = useState(\'\');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim()) {\\n      addTodo(text);\\n      setText(\'\');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\"mb-4 flex\\">\\n      <input\\n        type=\\"text\\"\\n        className=\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mr-2\\"\\n        placeholder=\\"Add a new todo...\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n      />\\n      <button\\n        type=\\"submit\\"\\n        className=\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\"\\n      >\\n        <Plus className=\\"inline-block mr-1\\" /> Add\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default TodoForm;\\n",\n      "test": null\n    },\n    "/components/TodoList.js": {\n      "code": "import React from \'react\';\\nimport TodoItem from \'./TodoItem\';\\n\\nfunction TodoList({ todos, toggleComplete, deleteTodo, setEditTodo, editTodo, updateTodo }) {\\n  return (\\n    <ul>\\n      {todos.map((todo) => (\\n        <TodoItem\\n          key={todo.id}\\n          todo={todo}\\n          toggleComplete={toggleComplete}\\n          deleteTodo={deleteTodo}\\n          setEditTodo={setEditTodo}\\n          editTodo={editTodo}\\n          updateTodo={updateTodo}\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TodoList;\\n",\n      "test": null\n    },\n    "/components/TodoItem.js": {\n      "code": "import React, { useState, useRef, useEffect } from \'react\';\\nimport { Trash, Edit, Check, X } from \'lucide-react\';\\nimport { format } from \'date-fns\';\\n\\nfunction TodoItem({ todo, toggleComplete, deleteTodo, setEditTodo, editTodo, updateTodo }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n  const editInputRef = useRef(null);\\n\\n  useEffect(() => {\\n    if (isEditing) {\\n      editInputRef.current.focus();\\n    }\\n  }, [isEditing]);\\n\\n  const handleEdit = () => {\\n    setIsEditing(true);\\n    setEditTodo(todo.id);\\n  };\\n\\n  const handleCancelEdit = () => {\\n    setIsEditing(false);\\n    setEditText(todo.text);\\n    setEditTodo(null);\\n  };\\n\\n  const handleSaveEdit = () => {\\n    if (editText.trim()) {\\n      updateTodo(todo.id, editText);\\n      setIsEditing(false);\\n    } else {\\n      handleCancelEdit();\\n    }\\n  };\\n\\n  return (\\n    <li className=\\"flex justify-between items-center py-2 px-4 border-b border-gray-200\\">\\n      {isEditing ? (\\n        <div className=\\"flex-grow mr-2\\">\\n          <input\\n            type=\\"text\\"\\n            ref={editInputRef}\\n            className=\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\"\\n            value={editText}\\n            onChange={(e) => setEditText(e.target.value)}\\n            onBlur={handleSaveEdit}\\n            onKeyDown={(e) => {\\n              if (e.key === \'Enter\') {\\n                handleSaveEdit();\\n              } else if (e.key === \'Escape\') {\\n                handleCancelEdit();\\n              }\\n            }}\\n          />\\n        </div>\\n      ) : (\\n        <div className=\\"flex items-center flex-grow\\">\\n          <input\\n            type=\\"checkbox\\"\\n            id={`todo-${todo.id}`}\\n            className=\\"mr-2 leading-tight\\"\\n            checked={todo.completed}\\n            onChange={() => toggleComplete(todo.id)}\\n          />\\n          <label\\n            htmlFor={`todo-${todo.id}`}\\n            className={`text-gray-700 text-sm ${todo.completed ? \'line-through text-gray-500\' : \'\'}`}\\n          >\\n            {todo.text}\\n          </label>\\n          <span className=\\"text-gray-400 text-xs ml-2\\">{format(new Date(todo.createdAt), \'MMM dd, yyyy\')}</span>\\n        </div>\\n      )}\\n\\n      <div>\\n        {isEditing ? (\\n          <>\\n            <button\\n              className=\\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline mr-2\\"\\n              onClick={handleSaveEdit}\\n            >\\n              <Check className=\\"inline-block\\" />\\n            </button>\\n            <button\\n              className=\\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline\\"\\n              onClick={handleCancelEdit}\\n            >\\n              <X className=\\"inline-block\\" />\\n            </button>\\n          </>\\n        ) : (\\n          <>\\n            <button\\n              className=\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline mr-2\\"\\n              onClick={handleEdit}\\n            >\\n              <Edit className=\\"inline-block\\" />\\n            </button>\\n            <button\\n              className=\\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline\\"\\n              onClick={() => deleteTodo(todo.id)}\\n            >\\n              <Trash className=\\"inline-block\\" />\\n            </button>\\n          </>\\n        )}\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\\n",\n      "test": null\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n    "/components/TodoForm.js",\n    "/components/TodoList.js",\n    "/components/TodoItem.js"\n  ]\n}\n```',
          },
        ],
      },
    ],
  });

//   const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
//   console.log(result.response.text());

